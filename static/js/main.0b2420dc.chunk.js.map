{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","sounds/sound.mp3","images/background.jpg","App.styles.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Difficulty","fetchQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","QuestionWrapper","styled","div","ButtonWrapper","correct","userClicked","uncertain","QuestionCard","callback","userAnswer","uncertainUser","dangerouslySetInnerHTML","__html","answer","correctAnswer","value","onClick","GlobalStyle","createGlobalStyle","BackgroundImage","NextButtonWrapper","TryagainButtonWrapper","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","currentDifficulty","setCurrentDifficulty","setUncertainUser","lostGame","setLostGame","fetchAllQuestions","EASY","easyQuestions","MEDIUM","mediumQuestions","HARD","hardQuestions","startQuiz","startingQUestions","play","id","useSound","SoundURL","volume","sprite","wrongAnswer","easyMusic","mediumMusic","hardMusic","lockinSound","stop","resetUserQuestions","revealAnswer","rightorwrong","setTimeout","nextQuestion","prev","className","currentMoney","OutputMoney","console","log","undefined","e","currentTarget","answerObject","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b2420dc.chunk.js","sourcesContent":["import {shuffleArray} from './utils'\r\n\r\nexport type Question = {\r\n    category: string\r\n    correct_answer: string\r\n    difficulty: string\r\n    incorrect_answers: string[]\r\n    question: string\r\n    type: string\r\n}\r\n\r\nexport type QuestionState = Question & { answers: string[] }\r\n\r\nexport enum Difficulty {\r\n    EASY = \"easy\",\r\n    MEDIUM = \"medium\",\r\n    HARD = \"hard\",\r\n}\r\n\r\nexport const fetchQuestions = async (amount: number, difficulty: Difficulty) => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`\r\n    const data = await (await fetch(endpoint)).json()\r\n    return data.results.map((question: Question) => (\r\n        {\r\n            ...question,\r\n            answers: shuffleArray([...question.incorrect_answers, question.correct_answer]),\r\n        }\r\n    ))\r\n}","export const shuffleArray = (array: any[]) => \r\n    [...array].sort(() => Math.random() - 0.5)","import styled from 'styled-components'\r\n\r\nexport const QuestionWrapper = styled.div`\r\n  max-width: 1100px;\r\n  background-image: linear-gradient(#002475, #002e94);\r\n  border-radius: 10px;\r\n  border: 2px solid #a1a09e;\r\n  padding: 20px;\r\n  text-align: center;\r\n  p {\r\n    font-family: Calibri;\r\n    color: white;\r\n    font-size: 1rem;\r\n  }\r\n`\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean\r\n  userClicked: boolean\r\n  uncertain: boolean\r\n}\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked, uncertain }) =>\r\n      uncertain && userClicked ? 'linear-gradient(0deg, #ff9900, #ffad33)'\r\n      :\r\n      correct && !uncertain\r\n        ? 'linear-gradient(0deg, #56FFA4, #59BC86)'\r\n        : !correct && userClicked\r\n        ? 'linear-gradient(0deg, #FF5656, #C16868)'\r\n        : 'linear-gradient(0deg, #002475, #002e94)'};\r\n    border: 2px solid #a1a09e;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`\r\n","import React from 'react'\r\n// styles\r\nimport  { QuestionWrapper, ButtonWrapper } from './QuestionCard.styles'\r\n\r\ntype Props = {\r\n  question: string\r\n  answers: string[]\r\n  callback: any\r\n  userAnswer: any\r\n  uncertainUser: boolean\r\n}\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n    question, \r\n    answers, \r\n    callback, \r\n    userAnswer,\r\n    uncertainUser,\r\n    }) => (\r\n        <div>\r\n            <QuestionWrapper>\r\n                <p dangerouslySetInnerHTML={{__html: question}}></p>\r\n            </QuestionWrapper>\r\n            <div>\r\n                {answers.map(answer => (\r\n                    <ButtonWrapper key={answer} \r\n                    uncertain={uncertainUser}\r\n                    correct={userAnswer?.correctAnswer === answer}\r\n                    userClicked={userAnswer?.answer === answer}>\r\n                    <button value={answer} onClick={callback}>\r\n                        <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n                    </button>\r\n                    </ButtonWrapper>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\nexport default QuestionCard\r\n","export default __webpack_public_path__ + \"static/media/sound.3a40a37c.mp3\";","export default __webpack_public_path__ + \"static/media/background.9de3097b.jpg\";","import styled, { createGlobalStyle } from 'styled-components'\r\n\r\n//import image\r\nimport BackgroundImage from './images/background.jpg'\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        height: 100%;\r\n    }\r\n\r\n    body {\r\n        background-color: #3c3c3c;\r\n        background-size: cover;\r\n        margin: 0;\r\n        padding: 0 20px;\r\n        display: flex;\r\n        justify-content: center;\r\n        background-image: url(${BackgroundImage});\r\n        color: white;\r\n    }\r\n`\r\n\r\nexport const NextButtonWrapper = styled.div`\r\nbutton {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background-image: linear-gradient(#002475, #002e94);\r\n    border: 2px solid #a1a09e;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`\r\n\r\nexport const TryagainButtonWrapper = styled.div`\r\nbutton {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background-image: linear-gradient(#006600, #009900);\r\n    border: 2px solid #a1a09e;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`","import React, { useState } from 'react'\r\nimport useSound from 'use-sound';\r\n// functions\r\nimport {fetchQuestions} from './API'\r\n// types\r\nimport {Difficulty , QuestionState} from './API'\r\n// components\r\nimport QuestionCard from './components/QuestionCard'\r\n//sound\r\nimport SoundURL from './sounds/sound.mp3'\r\n// styles\r\nimport { GlobalStyle } from './App.styles'\r\nimport { NextButtonWrapper, TryagainButtonWrapper } from './App.styles'\r\n\r\n\r\nconst TOTAL_QUESTIONS = 5\r\n\r\nexport type AnswerObject = {\r\n  question: string;\r\n  answer: string;\r\n  correct: boolean;\r\n  correctAnswer: string;\r\n}\r\n\r\nconst App = () => {\r\n  // states\r\n  const [loading, setLoading] = useState(false)\r\n  const [questions, setQuestions] = useState<QuestionState[]>([])\r\n  const [number, setNumber] = useState(0)\r\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\r\n  const [score, setScore] = useState(0)\r\n  const [gameOver, setGameOver] = useState(true)\r\n  const [currentDifficulty, setCurrentDifficulty] = useState(0)\r\n  const [uncertainUser, setUncertainUser] = useState(false)\r\n  const [lostGame, setLostGame] = useState(false)\r\n\r\n  const OutputMoney = (currentMoney: number) => {\r\n    switch(currentMoney) {\r\n      case 0:\r\n        return 0\r\n      case 1:\r\n        return 100\r\n      case 2:\r\n        return 200\r\n      case 3:\r\n        return 500\r\n      case 4:\r\n        return 1000\r\n      case 5:\r\n        return 2000\r\n      case 6:\r\n        return 4000\r\n      case 7:\r\n        return 8000\r\n      case 8:\r\n        return 16000\r\n      case 9:\r\n        return 32000\r\n      case 10:\r\n        return 64000\r\n      case 11:\r\n        return 128000\r\n      case 12:\r\n        return 250000\r\n      case 13:\r\n        return 250000\r\n      case 14:\r\n        return 500000\r\n      case 15:\r\n        return 1000000\r\n      default:\r\n    }\r\n  }\r\n\r\n\r\n  const fetchAllQuestions = async (difficulty: string) => {\r\n    if(difficulty === \"easy\"){\r\n      const easyQuestions = await fetchQuestions(\r\n        TOTAL_QUESTIONS,\r\n        Difficulty.EASY\r\n      )\r\n      return easyQuestions\r\n    }else if(difficulty === \"medium\"){\r\n      const mediumQuestions = await fetchQuestions(\r\n        TOTAL_QUESTIONS,\r\n        Difficulty.MEDIUM\r\n      )\r\n      return mediumQuestions\r\n    }else{\r\n      const hardQuestions = await fetchQuestions(\r\n        TOTAL_QUESTIONS,\r\n        Difficulty.HARD\r\n      )\r\n      return hardQuestions\r\n    }\r\n  } \r\n\r\n  const startQuiz = async () => {\r\n    setLoading(true)\r\n    setGameOver(false)\r\n    const startingQUestions = await fetchAllQuestions(\"easy\")\r\n    setQuestions(startingQUestions)\r\n    setScore(0)\r\n    setUserAnswers([])\r\n    setNumber(0)\r\n    setCurrentDifficulty(1)\r\n    play({ id: 'easyMusic' })\r\n    setLoading(false)\r\n    setLostGame(false)\r\n  }\r\n\r\n    const [play, { stop }] = useSound(SoundURL, {\r\n      volume: 0.5,\r\n      sprite: {\r\n        correctAnswer: [0, 5000],\r\n        wrongAnswer: [5000, 3000],\r\n        easyMusic: [8400, 163000],\r\n        mediumMusic: [174200, 158000],\r\n        hardMusic: [646000, 163000],\r\n        lockinSound: [801000, 5000]\r\n      },\r\n    })\r\n\r\n  const resetGame = () => {\r\n    setLostGame(true)\r\n    stop()\r\n    setCurrentDifficulty(0)\r\n    play({ id: 'wrongAnswer' })\r\n  }\r\n\r\n  const resetUserQuestions = () => {\r\n    setUserAnswers([]);\r\n  }\r\n\r\n  const revealAnswer = (rightorwrong: boolean) => { \r\n    setUncertainUser(false)\r\n    if(rightorwrong){\r\n      stop()\r\n      play({ id: 'correctAnswer' })\r\n      setTimeout(()=>nextQuestion(), 5000);\r\n      setScore(prev => prev+1)\r\n    }else{\r\n      resetGame()\r\n    }\r\n  }\r\n\r\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    if(!gameOver && !uncertainUser) {\r\n      // Users Answer\r\n      const answer = e.currentTarget.value\r\n      // check answer against correct answer\r\n      const correct = questions[number].correct_answer === answer\r\n      // Add Score if answer is correct\r\n      stop()\r\n      play({ id: 'lockinSound' })\r\n      const answerObject = {\r\n        question: questions[number].question,\r\n        answer,\r\n        correct,\r\n        correctAnswer: questions[number].correct_answer,\r\n      };\r\n      setUserAnswers((prev) => [...prev, answerObject]);\r\n      setUncertainUser(true)\r\n      if(correct) {\r\n        setTimeout(()=>revealAnswer(true), 5000);\r\n      }else{\r\n        setTimeout(()=>revealAnswer(false), 5000);\r\n      }\r\n    }\r\n  }\r\n\r\n  const nextQuestion = async () => {\r\n    // move on to the next question\r\n    const nextQuestion = number +1\r\n    if(nextQuestion === TOTAL_QUESTIONS && currentDifficulty === 3){\r\n      setGameOver(true)\r\n    }else if(nextQuestion === TOTAL_QUESTIONS && currentDifficulty < 3){\r\n      setCurrentDifficulty(currentDifficulty+1)\r\n      setNumber(0)\r\n      if(currentDifficulty === 2){\r\n        const startingQUestions = await fetchAllQuestions(\"medium\")\r\n        setQuestions(startingQUestions)\r\n        resetUserQuestions()\r\n        play({ id: 'mediumMusic' })\r\n      }else{\r\n        const startingQUestions = await fetchAllQuestions(\"hard\")\r\n        setQuestions(startingQUestions)\r\n        resetUserQuestions()\r\n        play({ id: 'hardMusic' })\r\n      }\r\n    }else{\r\n      switch(currentDifficulty) {\r\n        case 1:\r\n          play({ id: 'easyMusic' })\r\n          break;\r\n        case 2:\r\n          play({ id: 'mediumMusic' })\r\n          break;\r\n        case 3:\r\n          play({ id: 'hardMusic' })\r\n          break;\r\n        default:\r\n          stop()\r\n      } \r\n      setNumber(nextQuestion)\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <GlobalStyle/>\r\n      <div className=\"App\">\r\n        {gameOver ? (\r\n          <NextButtonWrapper>\r\n            <h1>React Quiz</h1>\r\n            <button className=\"start\" onClick={startQuiz}>start</button>\r\n          </NextButtonWrapper>\r\n        ) : null }\r\n        {!gameOver && <p className=\"money\">Money:${OutputMoney(score)}</p> }\r\n        {loading  && <p>Loading Questions...</p>}\r\n        {lostGame && <div>\r\n          <TryagainButtonWrapper>\r\n            <h1>GAME OVER</h1>\r\n            <button className=\"start\" onClick={startQuiz}>Try again!</button>\r\n          </TryagainButtonWrapper>\r\n        </div>}\r\n        {console.log(userAnswers)}\r\n        {!loading && !gameOver && (<QuestionCard \r\n          uncertainUser={uncertainUser}\r\n          question={questions[number].question}\r\n          answers={questions[number].answers}\r\n          userAnswer={userAnswers ? userAnswers[number] : undefined}\r\n          callback={checkAnswer}\r\n        />)}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}