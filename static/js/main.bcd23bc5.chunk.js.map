{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","sounds/sound.mp3","images/background.jpg","App.styles.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Difficulty","fetchQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","QuestionWrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BackgroundImage","NextButtonWrapper","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","currentDifficulty","setCurrentDifficulty","fetchAllQuestions","EASY","easyQuestions","MEDIUM","mediumQuestions","HARD","hardQuestions","startQuiz","startingQUestions","play","id","useSound","SoundURL","volume","sprite","wrongAnswer","easyMusic","mediumMusic","hardMusic","lockinSound","stop","checkAnswer","nextQuestion","prev","setTimeout","className","length","currentMoney","OutputMoney","undefined","e","currentTarget","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bcd23bc5.chunk.js","sourcesContent":["import {shuffleArray} from './utils'\r\n\r\nexport type Question = {\r\n    category: string\r\n    correct_answer: string\r\n    difficulty: string\r\n    incorrect_answers: string[]\r\n    question: string\r\n    type: string\r\n}\r\n\r\nexport type QuestionState = Question & { answers: string[] }\r\n\r\nexport enum Difficulty {\r\n    EASY = \"easy\",\r\n    MEDIUM = \"medium\",\r\n    HARD = \"hard\",\r\n}\r\n\r\nexport const fetchQuestions = async (amount: number, difficulty: Difficulty) => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`\r\n    const data = await (await fetch(endpoint)).json()\r\n    return data.results.map((question: Question) => (\r\n        {\r\n            ...question,\r\n            answers: shuffleArray([...question.incorrect_answers, question.correct_answer]),\r\n        }\r\n    ))\r\n}","export const shuffleArray = (array: any[]) => \r\n    [...array].sort(() => Math.random() - 0.5)","import styled from 'styled-components'\r\n\r\nexport const QuestionWrapper = styled.div`\r\n  max-width: 1100px;\r\n  background-image: linear-gradient(#002475, #002e94);\r\n  border-radius: 10px;\r\n  border: 2px solid #a1a09e;\r\n  padding: 20px;\r\n  text-align: center;\r\n  p {\r\n    font-family: Calibri;\r\n    color: white;\r\n    font-size: 1rem;\r\n  }\r\n`\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean\r\n  userClicked: boolean\r\n}\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct\r\n        ? 'linear-gradient(0deg, #56FFA4, #59BC86)'\r\n        : !correct && userClicked\r\n        ? 'linear-gradient(0deg, #FF5656, #C16868)'\r\n        : 'linear-gradient(0deg, #002475, #002e94)'};\r\n    border: 2px solid #a1a09e;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`\r\n","import React from 'react'\r\n// styles\r\nimport  { QuestionWrapper, ButtonWrapper } from './QuestionCard.styles'\r\n\r\ntype Props = {\r\n  question: string\r\n  answers: string[]\r\n  callback: any\r\n  userAnswer: any\r\n}\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n    question, \r\n    answers, \r\n    callback, \r\n    userAnswer,\r\n    }) => (\r\n        <div>\r\n            <QuestionWrapper>\r\n                <p dangerouslySetInnerHTML={{__html: question}}></p>\r\n            </QuestionWrapper>\r\n            <div>\r\n                {answers.map(answer => (\r\n                    <ButtonWrapper key={answer} \r\n                    correct={userAnswer?.correctAnswer === answer}\r\n                    userClicked={userAnswer?.answer === answer}>\r\n                    <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\r\n                        <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n                    </button>\r\n                    </ButtonWrapper>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\nexport default QuestionCard\r\n","export default __webpack_public_path__ + \"static/media/sound.3a40a37c.mp3\";","export default __webpack_public_path__ + \"static/media/background.9de3097b.jpg\";","import styled, { createGlobalStyle } from 'styled-components'\r\n\r\n//import image\r\nimport BackgroundImage from './images/background.jpg'\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        height: 100%;\r\n    }\r\n\r\n    body {\r\n        background-color: #3c3c3c;\r\n        background-size: cover;\r\n        margin: 0;\r\n        padding: 0 20px;\r\n        display: flex;\r\n        justify-content: center;\r\n        background-image: url(${BackgroundImage});\r\n        color: white;\r\n    }\r\n`\r\n\r\nexport const NextButtonWrapper = styled.div`\r\nbutton {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background-image: linear-gradient(#002475, #002e94);\r\n    border: 2px solid #a1a09e;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`","import React, { useState } from 'react'\nimport useSound from 'use-sound';\n// functions\nimport {fetchQuestions} from './API'\n// types\nimport {Difficulty , QuestionState} from './API'\n// components\nimport QuestionCard from './components/QuestionCard'\n//sound\nimport SoundURL from './sounds/sound.mp3'\n// styles\nimport { GlobalStyle } from './App.styles'\nimport { NextButtonWrapper } from './App.styles'\n\ntype AnswerObject = {\n  question: string;\n  answer: string\n  correct: boolean\n  correct_answer: string\n}\n\nconst TOTAL_QUESTIONS = 5\n\nconst App = () => {\n  // states\n  const [loading, setLoading] = useState(false)\n  const [questions, setQuestions] = useState<QuestionState[]>([])\n  const [number, setNumber] = useState(0)\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([])\n  const [score, setScore] = useState(0)\n  const [gameOver, setGameOver] = useState(true)\n  const [currentDifficulty, setCurrentDifficulty] = useState(0)\n\n  const OutputMoney = (currentMoney: number) => {\n    switch(currentMoney) {\n      case 0:\n        return 0\n      case 1:\n        return 100\n      case 2:\n        return 200\n      case 3:\n        return 500\n      case 4:\n        return 1000\n      case 5:\n        return 2000\n      case 6:\n        return 4000\n      case 7:\n        return 8000\n      case 8:\n        return 16000\n      case 9:\n        return 32000\n      case 10:\n        return 64000\n      case 11:\n        return 128000\n      case 12:\n        return 250000\n      case 13:\n        return 250000\n      case 14:\n        return 500000\n      case 15:\n        return 1000000\n      default:\n    }\n  }\n\n\n  const fetchAllQuestions = async (difficulty: string) => {\n    if(difficulty === \"easy\"){\n      const easyQuestions = await fetchQuestions(\n        TOTAL_QUESTIONS,\n        Difficulty.EASY\n      )\n      return easyQuestions\n    }else if(difficulty === \"medium\"){\n      const mediumQuestions = await fetchQuestions(\n        TOTAL_QUESTIONS,\n        Difficulty.MEDIUM\n      )\n      return mediumQuestions\n    }else{\n      const hardQuestions = await fetchQuestions(\n        TOTAL_QUESTIONS,\n        Difficulty.HARD\n      )\n      return hardQuestions\n    }\n  } \n\n  const startQuiz = async () => {\n    setLoading(true)\n    setGameOver(false)\n    const startingQUestions = await fetchAllQuestions(\"easy\")\n    setQuestions(startingQUestions)\n    setScore(0)\n    setUserAnswers([])\n    setNumber(0)\n    setCurrentDifficulty(1)\n    play({ id: 'easyMusic' })\n    setLoading(false)\n  }\n\n    const [play, { stop }] = useSound(SoundURL, {\n      volume: 0.5,\n      sprite: {\n        correctAnswer: [0, 5000],\n        wrongAnswer: [5000, 3000],\n        easyMusic: [8400, 163000],\n        mediumMusic: [174200, 163000],\n        hardMusic: [646000, 163000],\n        lockinSound: [801000, 5000]\n      },\n    })\n\n  const LockAnswer = (e: React.MouseEvent<HTMLButtonElement>) => { \n    const answer = e.currentTarget.value\n    stop()\n    play({ id: 'lockinSound' })\n    setTimeout(()=>checkAnswer(answer), 5000);\n\n  }\n\n  const checkAnswer = (answer: string) => {\n    if(!gameOver) {\n      // Users Answer\n      // check answer against correct answer\n      const correct = questions[number].correct_answer === answer\n      // Add Score if answer is correct\n      if(correct) {\n        stop()\n        play({ id: 'correctAnswer' })\n        nextQuestion()\n        setScore(prev => prev+1)\n      }else{\n        stop()\n        setCurrentDifficulty(0)\n        play({ id: 'wrongAnswer' })\n      }\n      // Save Answer in the array for user Answers\n      const answerObject = {\n        questions: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      }\n      setUserAnswers([])\n    }\n  }\n\n  const nextQuestion = async () => {\n    // move on to the next question\n    const nextQuestion = number +1\n\n    if(nextQuestion === TOTAL_QUESTIONS && currentDifficulty === 3){\n      setGameOver(true)\n    }else if(nextQuestion === TOTAL_QUESTIONS && currentDifficulty < 3){\n      setCurrentDifficulty(currentDifficulty+1)\n      setNumber(0)\n      if(currentDifficulty === 2){\n        const startingQUestions = await fetchAllQuestions(\"medium\")\n        setQuestions(startingQUestions)\n        setTimeout(()=>play({ id: 'mediumMusic' }), 5000);\n      }else{\n        const startingQUestions = await fetchAllQuestions(\"hard\")\n        setQuestions(startingQUestions)\n        setTimeout(()=>play({ id: 'hardMusic' }), 5000);\n      }\n    }else{\n      switch(currentDifficulty) {\n        case 1:\n          setTimeout(()=>play({ id: 'easyMusic' }), 5000);\n          break;\n        case 2:\n          setTimeout(()=>play({ id: 'mediumMusic' }), 5000);\n          break;\n        case 3:\n          setTimeout(()=>play({ id: 'hardMusic' }), 5000);\n          break;\n        default:\n          stop()\n      } \n      setNumber(nextQuestion)\n    }\n\n  }\n\n  return (\n    <>\n    <GlobalStyle/>\n      <div className=\"App\">\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <NextButtonWrapper>\n            <h1>React Quiz</h1>\n            <button className=\"start\" onClick={startQuiz}>start</button>\n          </NextButtonWrapper>\n        ) : null }\n        <p className=\"money\">Money:${OutputMoney(score)}</p>\n        {loading  && <p>Loading Questions...</p>}\n        {!loading && !gameOver && (<QuestionCard \n          question={questions[number].question}\n          answers={questions[number].answers}\n          userAnswer={userAnswers ? userAnswers[number] : undefined}\n          callback={LockAnswer}\n        />)}\n      </div>\n    </>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}